name: CI-CD

on:
  push:
    branches: 
      - 'main'
    tags: 
      - 'v*'
  pull-request:
    branches:
      - 'main'
    tags:
      - 'v*'

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Start running
        run:
          echo Job run now
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '7.0.100'
          
      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

  deploy-docker-hub:
    runs-on: ubuntu-latest
    needs: build-test
    outputs:
      output1: ${{ steps.meta.output.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: phamstri/dotnetcore-service
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


  deploy-vps:
    runs-on: ubuntu-latest
    needs: deploy-docker-hub
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - env:
        TAG: ${{ needs.deploy-docker-hub.outputs.output1 }}

      - name: SSH Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ${{ secrets.PATH }}
            docker-compose down
            echo "Remove unused previous built containers"
            if [[ "$(docker ps -f "status=exited" -q)" != "" ]]; then \
                docker rm -v $(docker ps -f "status=exited" -q); \
            fi
            echo "set new tag $TAG"
            sed -i 's/DOTNETCORE_SERVICE_TAG=.*/DOTNETCORE_SERVICE_TAG=$TAG/' .env
            echo "start new container for service"
            docker-compose up -d --build
            echo "Remove unused images"
            if [[ "$(docker images -f dangling=true -q)" != "" ]]; then \
                docker rmi $(docker images -f "dangling=true" -q); \
            fi
name: CI-CD

on:
  push:
    branches: [ "main"]
  pull_request:
    branches: [ "main"]
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Start running
        run:
          echo Job run now
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '7.0.100'
          
      - name: Build
        run: dotnet build dotnetcore-service.csproj
        
      - name: Test
        run: dotnet test dotnetcore-service.csproj

  deploy-docker-hub:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/dotnetcore-service:latest

  deploy-vps:
    runs-on: ubuntu-latest
    needs: deploy-docker-hub
    steps:
      - uses: actions/checkout@v2
      - name: SSH Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ${{ secrets.PATH }}
            docker-compose down
            echo "Remove unused previous built containers"
            if [[ "$(docker ps -f "status=exited" -q)" != "" ]]; then \
                docker rm -v $(docker ps -f "status=exited" -q); \
            fi
            echo "start new container for service"
            docker-compose up -d --build
            echo "Remove unused images"
            if [[ "$(docker images -f dangling=true -q)" != "" ]]; then \
                docker rmi $(docker images -f "dangling=true" -q); \
            fi